/**
 * @packageDocumentation
 * @module api.functional.reports.convert_pdf_to_markdown
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * PDF 파일을 마크다운으로 변환
 * @controller ReportsController.convertPdfToMarkdown
 * @path POST /reports/convert-pdf-to-markdown
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function convertPdfToMarkdown(
  connection: IConnection,
  body: convertPdfToMarkdown.Body,
): Promise<convertPdfToMarkdown.Output> {
  return true === connection.simulate
    ? convertPdfToMarkdown.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...convertPdfToMarkdown.METADATA,
          template: convertPdfToMarkdown.METADATA.path,
          path: convertPdfToMarkdown.path(),
        },
        body,
      );
}
export namespace convertPdfToMarkdown {
  export type Body = { pdfFilePath: string; outputDir?: string };
  export type Output = {
    markdown: string;
    fileName: string;
    success: boolean;
    error?: string;
  };

  export const METADATA = {
    method: "POST",
    path: "/reports/convert-pdf-to-markdown",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/reports/convert-pdf-to-markdown";
  export const random = (): {
    markdown: string;
    fileName: string;
    success: boolean;
    error?: string;
  } =>
    typia.random<{
      markdown: string;
      fileName: string;
      success: boolean;
      error?: string;
    }>();
  export const simulate = (connection: IConnection, body: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(body));
    return random();
  };
}
