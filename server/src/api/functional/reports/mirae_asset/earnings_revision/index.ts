/**
 * @packageDocumentation
 * @module api.functional.reports.mirae_asset.earnings_revision
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { MiraeAssetReport } from "../../../../../providers/reports/MiraeAssetScraperService";

/**
 * Earnings Revision 보고서 가져오기
 * @controller ReportsController.getEarningsRevisionReports
 * @path GET /reports/mirae-asset/earnings-revision
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getEarningsRevisionReports(
  connection: IConnection,
  limit: number,
): Promise<getEarningsRevisionReports.Output> {
  return true === connection.simulate
    ? getEarningsRevisionReports.simulate(connection, limit)
    : PlainFetcher.fetch(connection, {
        ...getEarningsRevisionReports.METADATA,
        template: getEarningsRevisionReports.METADATA.path,
        path: getEarningsRevisionReports.path(limit),
      });
}
export namespace getEarningsRevisionReports {
  export type Output = MiraeAssetReport[];

  export const METADATA = {
    method: "GET",
    path: "/reports/mirae-asset/earnings-revision",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (limit: number) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries({
      limit: limit,
    } as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/reports/mirae-asset/earnings-revision";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (): MiraeAssetReport[] =>
    typia.random<MiraeAssetReport[]>();
  export const simulate = (connection: IConnection, limit: number): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(limit),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(limit));
    return random();
  };
}
