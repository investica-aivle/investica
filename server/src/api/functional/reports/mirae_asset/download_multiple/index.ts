/**
 * @packageDocumentation
 * @module api.functional.reports.mirae_asset.download_multiple
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { MiraeAssetReport } from "../../../../../providers/reports/MiraeAssetScraperService";

/**
 * 미래에셋증권 보고서 일괄 다운로드
 * @controller ReportsController.downloadMultipleMiraeAssetReports
 * @path POST /reports/mirae-asset/download-multiple
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function downloadMultipleMiraeAssetReports(
  connection: IConnection,
  body: downloadMultipleMiraeAssetReports.Body,
): Promise<downloadMultipleMiraeAssetReports.Output> {
  return true === connection.simulate
    ? downloadMultipleMiraeAssetReports.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...downloadMultipleMiraeAssetReports.METADATA,
          template: downloadMultipleMiraeAssetReports.METADATA.path,
          path: downloadMultipleMiraeAssetReports.path(),
        },
        body,
      );
}
export namespace downloadMultipleMiraeAssetReports {
  export type Body = { reports: MiraeAssetReport[]; outputDir?: string };
  export type Output = { filePaths: string[] };

  export const METADATA = {
    method: "POST",
    path: "/reports/mirae-asset/download-multiple",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/reports/mirae-asset/download-multiple";
  export const random = (): { filePaths: string[] } =>
    typia.random<{ filePaths: string[] }>();
  export const simulate = (connection: IConnection, body: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(body));
    return random();
  };
}
