/**
 * @packageDocumentation
 * @module api.functional.reports.mirae_asset.latest
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { MiraeAssetReport } from "../../../../../providers/reports/MiraeAssetScraperService";

/**
 * 미래에셋증권에서 최신 보고서 가져오기
 * @controller ReportsController.getLatestMiraeAssetReports
 * @path GET /reports/mirae-asset/latest
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLatestMiraeAssetReports(
  connection: IConnection,
  keywords: string,
  limit: number,
): Promise<getLatestMiraeAssetReports.Output> {
  return true === connection.simulate
    ? getLatestMiraeAssetReports.simulate(connection, keywords, limit)
    : PlainFetcher.fetch(connection, {
        ...getLatestMiraeAssetReports.METADATA,
        template: getLatestMiraeAssetReports.METADATA.path,
        path: getLatestMiraeAssetReports.path(keywords, limit),
      });
}
export namespace getLatestMiraeAssetReports {
  export type Output = MiraeAssetReport[];

  export const METADATA = {
    method: "GET",
    path: "/reports/mirae-asset/latest",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (keywords: string, limit: number) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries({
      keywords: keywords,
      limit: limit,
    } as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/reports/mirae-asset/latest";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (): MiraeAssetReport[] =>
    typia.random<MiraeAssetReport[]>();
  export const simulate = (
    connection: IConnection,
    keywords: string,
    limit: number,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(keywords, limit),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(keywords));
    assert.query(() => typia.assert(limit));
    return random();
  };
}
