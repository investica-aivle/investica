/**
 * @packageDocumentation
 * @module api.functional.reports.mirae_asset.scrape
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { MiraeAssetReport } from "../../../../../providers/reports/MiraeAssetScraperService";

/**
 * 미래에셋증권에서 특정 키워드의 보고서 스크래핑
 * @controller ReportsController.scrapeMiraeAssetReports
 * @path POST /reports/mirae-asset/scrape
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function scrapeMiraeAssetReports(
  connection: IConnection,
  body: scrapeMiraeAssetReports.Body,
): Promise<scrapeMiraeAssetReports.Output> {
  return true === connection.simulate
    ? scrapeMiraeAssetReports.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...scrapeMiraeAssetReports.METADATA,
          template: scrapeMiraeAssetReports.METADATA.path,
          path: scrapeMiraeAssetReports.path(),
        },
        body,
      );
}
export namespace scrapeMiraeAssetReports {
  export type Body = { keywords: string[] };
  export type Output = MiraeAssetReport[];

  export const METADATA = {
    method: "POST",
    path: "/reports/mirae-asset/scrape",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/reports/mirae-asset/scrape";
  export const random = (): MiraeAssetReport[] =>
    typia.random<MiraeAssetReport[]>();
  export const simulate = (connection: IConnection, body: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(body));
    return random();
  };
}
